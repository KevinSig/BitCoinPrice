{"ast":null,"code":"import React, { useEffect, useState } from \"react\";\n\nvar FetchData = function FetchData(url) {\n  var _useState = useState({\n    data: null,\n    loading: true\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  useEffect(function () {\n    setState(function (state) {\n      return {\n        data: state.data,\n        loading: true\n      };\n    });\n    setState(function (state) {\n      return {\n        data: state.data,\n        loading: true\n      };\n    }); // whenever this hook is run\n\n    fetch(url).then(function (x) {\n      return x.text();\n    }).then(function (y) {\n      return setState({\n        data: y,\n        loading: false\n      });\n    });\n  }, [url]);\n  return state;\n};\n\nexport default FetchData;","map":{"version":3,"sources":["/Users/asigari/Desktop/PROJECTS/next-js/hooks/FetchData.js"],"names":["React","useEffect","useState","FetchData","url","data","loading","state","setState","fetch","then","x","text","y"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,GAAG,EAAI;AAAA,kBACGF,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAE,IAAR;AAAcC,IAAAA,OAAO,EAAE;AAAvB,GAAD,CADX;AAAA,MAChBC,KADgB;AAAA,MACTC,QADS;;AAGvBP,EAAAA,SAAS,CAAC,YAAM;AACdO,IAAAA,QAAQ,CAAC,UAAAD,KAAK;AAAA,aAAK;AAAEF,QAAAA,IAAI,EAAEE,KAAK,CAACF,IAAd;AAAoBC,QAAAA,OAAO,EAAE;AAA7B,OAAL;AAAA,KAAN,CAAR;AACAE,IAAAA,QAAQ,CAAC,UAAAD,KAAK;AAAA,aAAK;AAAEF,QAAAA,IAAI,EAAEE,KAAK,CAACF,IAAd;AAAoBC,QAAAA,OAAO,EAAE;AAA7B,OAAL;AAAA,KAAN,CAAR,CAFc,CAE2C;;AACzDG,IAAAA,KAAK,CAACL,GAAD,CAAL,CACGM,IADH,CACQ,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAACC,IAAF,EAAJ;AAAA,KADT,EAEGF,IAFH,CAEQ,UAAAG,CAAC;AAAA,aACDL,QAAQ,CAAC;AAAEH,QAAAA,IAAI,EAAEQ,CAAR;AAAWP,QAAAA,OAAO,EAAE;AAApB,OAAD,CADP;AAAA,KAFT;AAID,GAPQ,EAON,CAACF,GAAD,CAPM,CAAT;AASA,SAAOG,KAAP;AACD,CAbD;;AAeA,eAAeJ,SAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst FetchData = url => {\n  const [state, setState] = useState({ data: null, loading: true });\n\n  useEffect(() => {\n    setState(state => ({ data: state.data, loading: true }));\n    setState(state => ({ data: state.data, loading: true })) // whenever this hook is run\n    fetch(url)\n      .then(x => x.text())\n      .then(y => \n            setState({ data: y, loading: false }));\n  }, [url]);\n\n  return state;\n};  \n\nexport default FetchData;\n"]},"metadata":{},"sourceType":"module"}